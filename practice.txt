private void btnLoadDataset_Click(object sender, EventArgs e)
{
    OpenFileDialog openFileDialog = new OpenFileDialog
    {
        Filter = "CSV files (*.csv)|*.csv",
        Title = "Select a dataset file"
    };

    if (openFileDialog.ShowDialog() == DialogResult.OK)
    {
        string filePath = openFileDialog.FileName;
        LoadCitiesFromDataset(filePath);
    }
}

private void LoadCitiesFromDataset(string filePath)
{
    cities = new List<City>();

    var lines = System.IO.File.ReadAllLines(filePath);
    foreach (var line in lines.Skip(1)) // Skip header
    {
        var data = line.Split(',');
        int x = int.Parse(data[1]);
        int y = int.Parse(data[2]);
        cities.Add(new City(x, y));
    }
    
    // Optionally, refresh the display after loading new cities
    pictureBox1.Refresh();
}




using System;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

public class ResultForm : Form
{
    private DataGridView dataGridView;
    private Chart chart;

    public ResultForm()
    {
        InitializeComponents();
    }

    private void InitializeComponents()
    {
        this.Text = "Results";
        this.Size = new System.Drawing.Size(600, 400);

        // DataGridView
        dataGridView = new DataGridView
        {
            Dock = DockStyle.Top,
            Height = 200
        };
        dataGridView.Columns.Add("Generation", "Generation");
        dataGridView.Columns.Add("BestDistance", "Best Distance");

        // Chart
        chart = new Chart { Dock = DockStyle.Bottom, Height = 200 };
        ChartArea chartArea = new ChartArea();
        chart.ChartAreas.Add(chartArea);
        Series series = new Series
        {
            ChartType = SeriesChartType.Line,
            XValueType = ChartValueType.Int32
        };
        chart.Series.Add(series);

        // Add components to form
        this.Controls.Add(dataGridView);
        this.Controls.Add(chart);
    }

    public void UpdateResults(int generation, double bestDistance)
    {
        // Update the DataGridView
        dataGridView.Rows.Add(generation, bestDistance);

        // Update the Chart
        chart.Series[0].Points.AddXY(generation, bestDistance);
    }
}


private async void btnStart_Click(object sender, EventArgs e)
{
    stopRequested = false;

    // Show the result form
    var resultForm = new ResultForm();
    resultForm.Show();

    gaTSP = new GeneticAlgorithmTSP(cities, pictureBox1, lblIteration, lblBestDistance, lblOptimizedPath, resultForm.UpdateResults, () => stopRequested);
    await gaTSP.RunAsync();
}


private Action<int, double> updateResultsCallback;

public GeneticAlgorithmTSP(List<City> cities, PictureBox pictureBox, Label lblIteration, Label lblBestDistance, Label lblOptimizedPath, Action<int, double> updateResultsCallback, Func<bool> stopRequested)
{
    this.cities = cities;
    this.pictureBox = pictureBox;
    this.graphics = pictureBox.CreateGraphics();
    this.lblIteration = lblIteration;
    this.lblBestDistance = lblBestDistance;
    this.lblOptimizedPath = lblOptimizedPath;
    this.updateResultsCallback = updateResultsCallback;
    this.stopRequested = stopRequested;

    InitializePopulation();
}


// After updating the best tour
updateResultsCallback(generation, bestDistance);
