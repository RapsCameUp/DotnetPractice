 // Run through each dataset and display the performance
        private async void RunDatasets()
        {
            foreach (var dataset in datasets)
            {
                cities = ParseDataset(dataset); // Parse dataset into cities
                stopRequested = false;
                gaTSP = new GeneticAlgorithmTSP(cities, pictureBox1, lblIteration, lblBestDistance, lblOptimizedPath, () => stopRequested);
                double bestDistance = await gaTSP.RunAsync(); // Run the genetic algorithm and get best distance
                
                performanceData.Add(new PerformanceData
                {
                    DatasetSize = cities.Count,
                    BestDistance = bestDistance
                });
            }

            // After processing all datasets, show the result form
            ShowResultForm();
        }

        // Parse dataset line into a list of cities
        private List<City> ParseDataset(string dataset)
        {
            var cityData = dataset.Split(';').Select(s => s.Split(',')).ToList();
            return cityData.Select(c => new City(int.Parse(c[0]), int.Parse(c[1]))).ToList();
        }

        // Show result form to display the performance table and graph
        private void ShowResultForm()
        {
            ResultForm resultForm = new ResultForm(performanceData);
            resultForm.Show();
        }





 public class PerformanceData
    {
        public int DatasetSize { get; set; }
        public double BestDistance { get; set; }
    }


public async Task<double> RunAsync()
{
    double bestDistance = 0;
    
    await Task.Run(() =>
    {
        for (int gen = 0; gen < generations; gen++)
        {
            if (stopRequested()) return;
            
            var newPopulation = new List<List<int>>();
            for (int i = 0; i < populationSize; i++)
            {
                var parent1 = Selection();
                var parent2 = Selection();
                var child = Crossover(parent1, parent2);
                Mutate(child);
                newPopulation.Add(child);
            }
            population = newPopulation;

            var bestTour = population.OrderBy(Fitness).Last();
            bestDistance = 1 / Fitness(bestTour);

            pictureBox.Invoke((Action)(() =>
            {
                UpdateUI(bestTour, bestDistance, gen);
            }));
        }
    });

    return bestDistance; // Return the best distance after the run
}



using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace TSP_GA
{
    public partial class ResultForm : Form
    {
        public ResultForm(List<PerformanceData> performanceData)
        {
            InitializeComponent();
            PopulateTable(performanceData);
            PlotGraph(performanceData);
        }

        // Populate table with dataset size and best distance
        private void PopulateTable(List<PerformanceData> performanceData)
        {
            dataGridView1.Rows.Clear();
            foreach (var data in performanceData)
            {
                dataGridView1.Rows.Add(data.DatasetSize, data.BestDistance);
            }
        }

        // Plot graph to show performance
        private void PlotGraph(List<PerformanceData> performanceData)
        {
            chart1.Series.Clear();
            Series series = new Series("Best Distance");
            chart1.Series.Add(series);

            foreach (var data in performanceData)
            {
                series.Points.AddXY(data.DatasetSize, data.BestDistance);
            }
        }
    }
}
